//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 10.11.2017 19:58:29
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace CorpusExplorer.Sdk.Db.LinqConnect.Model
{

    [DatabaseAttribute(Name = "test")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class DataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(DataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertCorpus(Corpus instance);
        partial void UpdateCorpus(Corpus instance);
        partial void DeleteCorpus(Corpus instance);
        partial void InsertCorpusMetadataEntry(CorpusMetadataEntry instance);
        partial void UpdateCorpusMetadataEntry(CorpusMetadataEntry instance);
        partial void DeleteCorpusMetadataEntry(CorpusMetadataEntry instance);
        partial void InsertLayer(Layer instance);
        partial void UpdateLayer(Layer instance);
        partial void DeleteLayer(Layer instance);
        partial void InsertLayerDictionaryEntry(LayerDictionaryEntry instance);
        partial void UpdateLayerDictionaryEntry(LayerDictionaryEntry instance);
        partial void DeleteLayerDictionaryEntry(LayerDictionaryEntry instance);
        partial void InsertDocument(Document instance);
        partial void UpdateDocument(Document instance);
        partial void DeleteDocument(Document instance);
        partial void InsertLayerDocument(LayerDocument instance);
        partial void UpdateLayerDocument(LayerDocument instance);
        partial void DeleteLayerDocument(LayerDocument instance);
        partial void InsertDocumentMetadataEntry(DocumentMetadataEntry instance);
        partial void UpdateDocumentMetadataEntry(DocumentMetadataEntry instance);
        partial void DeleteDocumentMetadataEntry(DocumentMetadataEntry instance);

        #endregion

        public DataContext() :
        base(GetConnectionString("DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public DataContext(MappingSource mappingSource) :
        base(GetConnectionString("DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public DataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Corpus> Corpora
        {
            get
            {
                return this.GetTable<Corpus>();
            }
        }

        public Devart.Data.Linq.Table<CorpusMetadataEntry> CorpusMetadataEntries
        {
            get
            {
                return this.GetTable<CorpusMetadataEntry>();
            }
        }

        public Devart.Data.Linq.Table<Layer> Layers
        {
            get
            {
                return this.GetTable<Layer>();
            }
        }

        public Devart.Data.Linq.Table<LayerDictionaryEntry> LayerDictionaryEntries
        {
            get
            {
                return this.GetTable<LayerDictionaryEntry>();
            }
        }

        public Devart.Data.Linq.Table<Document> Documents
        {
            get
            {
                return this.GetTable<Document>();
            }
        }

        public Devart.Data.Linq.Table<LayerDocument> LayerDocuments
        {
            get
            {
                return this.GetTable<LayerDocument>();
            }
        }

        public Devart.Data.Linq.Table<DocumentMetadataEntry> DocumentMetadataEntries
        {
            get
            {
                return this.GetTable<DocumentMetadataEntry>();
            }
        }
    }
}

namespace CorpusExplorer.Sdk.Db.LinqConnect.Model
{

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Db.LinqConnect.Model.Corpus in the schema.
    /// </summary>
    [Table(Name = @"test.Corpora")]
    public partial class Corpus : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private System.Guid _GUID;

        private string _Displayname;
        #pragma warning restore 0649

        private EntitySet<CorpusMetadataEntry> _CorpusMetadataEntries;

        private EntitySet<Layer> _Layers;

        private EntitySet<Document> _Documents;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnGUIDChanging(System.Guid value);
        partial void OnGUIDChanged();
        partial void OnDisplaynameChanging(string value);
        partial void OnDisplaynameChanged();
        #endregion

        public Corpus()
        {
            this._CorpusMetadataEntries = new EntitySet<CorpusMetadataEntry>(new Action<CorpusMetadataEntry>(this.attach_CorpusMetadataEntries), new Action<CorpusMetadataEntry>(this.detach_CorpusMetadataEntries));
            this._Layers = new EntitySet<Layer>(new Action<Layer>(this.attach_Layers), new Action<Layer>(this.detach_Layers));
            this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "int(9) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GUID in the schema.
        /// </summary>
        [Column(Storage = "_GUID", CanBeNull = false, DbType = "binary(16) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Guid GUID
        {
            get
            {
                return this._GUID;
            }
            set
            {
                if (this._GUID != value)
                {
                    this.OnGUIDChanging(value);
                    this.SendPropertyChanging("GUID");
                    this._GUID = value;
                    this.SendPropertyChanged("GUID");
                    this.OnGUIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Displayname in the schema.
        /// </summary>
        [Column(Storage = "_Displayname", DbType = "longtext NULL", UpdateCheck = UpdateCheck.Never)]
        public string Displayname
        {
            get
            {
                return this._Displayname;
            }
            set
            {
                if (this._Displayname != value)
                {
                    this.OnDisplaynameChanging(value);
                    this.SendPropertyChanging("Displayname");
                    this._Displayname = value;
                    this.SendPropertyChanged("Displayname");
                    this.OnDisplaynameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CorpusMetadataEntries in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Corpus_CorpusMetadataEntry", Storage="_CorpusMetadataEntries", ThisKey="ID", OtherKey="CorpusID", DeleteRule="CASCADE")]
        public EntitySet<CorpusMetadataEntry> CorpusMetadataEntries
        {
            get
            {
                return this._CorpusMetadataEntries;
            }
            set
            {
                this._CorpusMetadataEntries.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Layers in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Corpus_Layer", Storage="_Layers", ThisKey="ID", OtherKey="CorpusID", DeleteRule="CASCADE")]
        public EntitySet<Layer> Layers
        {
            get
            {
                return this._Layers;
            }
            set
            {
                this._Layers.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Documents in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Corpus_Document", Storage="_Documents", ThisKey="ID", OtherKey="CorpusID", DeleteRule="CASCADE")]
        public EntitySet<Document> Documents
        {
            get
            {
                return this._Documents;
            }
            set
            {
                this._Documents.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CorpusMetadataEntries(CorpusMetadataEntry entity)
        {
            this.SendPropertyChanging("CorpusMetadataEntries");
            entity.Corpus = this;
        }
    
        private void detach_CorpusMetadataEntries(CorpusMetadataEntry entity)
        {
            this.SendPropertyChanging("CorpusMetadataEntries");
            entity.Corpus = null;
        }

        private void attach_Layers(Layer entity)
        {
            this.SendPropertyChanging("Layers");
            entity.Corpus = this;
        }
    
        private void detach_Layers(Layer entity)
        {
            this.SendPropertyChanging("Layers");
            entity.Corpus = null;
        }

        private void attach_Documents(Document entity)
        {
            this.SendPropertyChanging("Documents");
            entity.Corpus = this;
        }
    
        private void detach_Documents(Document entity)
        {
            this.SendPropertyChanging("Documents");
            entity.Corpus = null;
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Db.LinqConnect.Model.CorpusMetadataEntry in the schema.
    /// </summary>
    [Table(Name = @"test.CorpusMetadataEntries")]
    public partial class CorpusMetadataEntry : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CorpusID;

        private string _Label;

        private byte[] _Value;
        #pragma warning restore 0649

        private EntityRef<Corpus> _Corpus;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCorpusIDChanging(int value);
        partial void OnCorpusIDChanged();
        partial void OnLabelChanging(string value);
        partial void OnLabelChanged();
        partial void OnValueChanging(byte[] value);
        partial void OnValueChanged();
        #endregion

        public CorpusMetadataEntry()
        {
            this._Corpus  = default(EntityRef<Corpus>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CorpusID in the schema.
        /// </summary>
        [Column(Storage = "_CorpusID", CanBeNull = false, DbType = "int(9) NOT NULL", IsPrimaryKey = true)]
        public int CorpusID
        {
            get
            {
                return this._CorpusID;
            }
            set
            {
                if (this._CorpusID != value)
                {
                    if (this._Corpus.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCorpusIDChanging(value);
                    this.SendPropertyChanging("CorpusID");
                    this._CorpusID = value;
                    this.SendPropertyChanged("CorpusID");
                    this.OnCorpusIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Label in the schema.
        /// </summary>
        [Column(Storage = "_Label", CanBeNull = false, DbType = "varchar(250) NOT NULL", IsPrimaryKey = true)]
        public string Label
        {
            get
            {
                return this._Label;
            }
            set
            {
                if (this._Label != value)
                {
                    this.OnLabelChanging(value);
                    this.SendPropertyChanging("Label");
                    this._Label = value;
                    this.SendPropertyChanged("Label");
                    this.OnLabelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Storage = "_Value", DbType = "longblob NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging("Value");
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Corpus in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Corpus_CorpusMetadataEntry", Storage="_Corpus", ThisKey="CorpusID", OtherKey="ID", IsForeignKey=true)]
        public Corpus Corpus
        {
            get
            {
                return this._Corpus.Entity;
            }
            set
            {
                Corpus previousValue = this._Corpus.Entity;
                if ((previousValue != value) || (this._Corpus.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Corpus");
                    if (previousValue != null)
                    {
                        this._Corpus.Entity = null;
                        previousValue.CorpusMetadataEntries.Remove(this);
                    }
                    this._Corpus.Entity = value;
                    if (value != null)
                    {
                        this._CorpusID = value.ID;
                        value.CorpusMetadataEntries.Add(this);
                    }
                    else
                    {
                        this._CorpusID = default(int);
                    }
                    this.SendPropertyChanged("Corpus");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Db.LinqConnect.Model.Layer in the schema.
    /// </summary>
    [Table(Name = @"test.Layers")]
    public partial class Layer : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private System.Guid _GUID;

        private int _CorpusID;

        private string _Displayname;
        #pragma warning restore 0649

        private EntityRef<Corpus> _Corpus;

        private EntitySet<LayerDictionaryEntry> _LayerDictionaryEntries;

        private EntitySet<LayerDocument> _LayerDocuments;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnGUIDChanging(System.Guid value);
        partial void OnGUIDChanged();
        partial void OnCorpusIDChanging(int value);
        partial void OnCorpusIDChanged();
        partial void OnDisplaynameChanging(string value);
        partial void OnDisplaynameChanged();
        #endregion

        public Layer()
        {
            this._Corpus  = default(EntityRef<Corpus>);
            this._LayerDictionaryEntries = new EntitySet<LayerDictionaryEntry>(new Action<LayerDictionaryEntry>(this.attach_LayerDictionaryEntries), new Action<LayerDictionaryEntry>(this.detach_LayerDictionaryEntries));
            this._LayerDocuments = new EntitySet<LayerDocument>(new Action<LayerDocument>(this.attach_LayerDocuments), new Action<LayerDocument>(this.detach_LayerDocuments));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "int(9) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GUID in the schema.
        /// </summary>
        [Column(Storage = "_GUID", CanBeNull = false, DbType = "binary(16) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Guid GUID
        {
            get
            {
                return this._GUID;
            }
            set
            {
                if (this._GUID != value)
                {
                    this.OnGUIDChanging(value);
                    this.SendPropertyChanging("GUID");
                    this._GUID = value;
                    this.SendPropertyChanged("GUID");
                    this.OnGUIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CorpusID in the schema.
        /// </summary>
        [Column(Storage = "_CorpusID", CanBeNull = false, DbType = "int(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CorpusID
        {
            get
            {
                return this._CorpusID;
            }
            set
            {
                if (this._CorpusID != value)
                {
                    if (this._Corpus.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCorpusIDChanging(value);
                    this.SendPropertyChanging("CorpusID");
                    this._CorpusID = value;
                    this.SendPropertyChanged("CorpusID");
                    this.OnCorpusIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Displayname in the schema.
        /// </summary>
        [Column(Storage = "_Displayname", DbType = "longtext NULL", UpdateCheck = UpdateCheck.Never)]
        public string Displayname
        {
            get
            {
                return this._Displayname;
            }
            set
            {
                if (this._Displayname != value)
                {
                    this.OnDisplaynameChanging(value);
                    this.SendPropertyChanging("Displayname");
                    this._Displayname = value;
                    this.SendPropertyChanged("Displayname");
                    this.OnDisplaynameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Corpus in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Corpus_Layer", Storage="_Corpus", ThisKey="CorpusID", OtherKey="ID", IsForeignKey=true)]
        public Corpus Corpus
        {
            get
            {
                return this._Corpus.Entity;
            }
            set
            {
                Corpus previousValue = this._Corpus.Entity;
                if ((previousValue != value) || (this._Corpus.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Corpus");
                    if (previousValue != null)
                    {
                        this._Corpus.Entity = null;
                        previousValue.Layers.Remove(this);
                    }
                    this._Corpus.Entity = value;
                    if (value != null)
                    {
                        this._CorpusID = value.ID;
                        value.Layers.Add(this);
                    }
                    else
                    {
                        this._CorpusID = default(int);
                    }
                    this.SendPropertyChanged("Corpus");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LayerDictionaryEntries in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Layer_LayerDictionaryEntry", Storage="_LayerDictionaryEntries", ThisKey="ID", OtherKey="LayerID", DeleteRule="CASCADE")]
        public EntitySet<LayerDictionaryEntry> LayerDictionaryEntries
        {
            get
            {
                return this._LayerDictionaryEntries;
            }
            set
            {
                this._LayerDictionaryEntries.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for LayerDocuments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Layer_LayerDocument", Storage="_LayerDocuments", ThisKey="ID", OtherKey="LayerID", DeleteRule="CASCADE")]
        public EntitySet<LayerDocument> LayerDocuments
        {
            get
            {
                return this._LayerDocuments;
            }
            set
            {
                this._LayerDocuments.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_LayerDictionaryEntries(LayerDictionaryEntry entity)
        {
            this.SendPropertyChanging("LayerDictionaryEntries");
            entity.Layer = this;
        }
    
        private void detach_LayerDictionaryEntries(LayerDictionaryEntry entity)
        {
            this.SendPropertyChanging("LayerDictionaryEntries");
            entity.Layer = null;
        }

        private void attach_LayerDocuments(LayerDocument entity)
        {
            this.SendPropertyChanging("LayerDocuments");
            entity.Layer = this;
        }
    
        private void detach_LayerDocuments(LayerDocument entity)
        {
            this.SendPropertyChanging("LayerDocuments");
            entity.Layer = null;
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Db.LinqConnect.Model.LayerDictionaryEntry in the schema.
    /// </summary>
    [Table(Name = @"test.LayerDictionaryEntries")]
    public partial class LayerDictionaryEntry : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _LayerID;

        private int _Index;

        private string _Value;
        #pragma warning restore 0649

        private EntityRef<Layer> _Layer;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnLayerIDChanging(int value);
        partial void OnLayerIDChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        #endregion

        public LayerDictionaryEntry()
        {
            this._Layer  = default(EntityRef<Layer>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for LayerID in the schema.
        /// </summary>
        [Column(Storage = "_LayerID", CanBeNull = false, DbType = "int(9) NOT NULL", IsPrimaryKey = true)]
        public int LayerID
        {
            get
            {
                return this._LayerID;
            }
            set
            {
                if (this._LayerID != value)
                {
                    if (this._Layer.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLayerIDChanging(value);
                    this.SendPropertyChanging("LayerID");
                    this._LayerID = value;
                    this.SendPropertyChanged("LayerID");
                    this.OnLayerIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Index in the schema.
        /// </summary>
        [Column(Name = @"`Index`", Storage = "_Index", CanBeNull = false, DbType = "int(9) NOT NULL", IsPrimaryKey = true)]
        public int Index
        {
            get
            {
                return this._Index;
            }
            set
            {
                if (this._Index != value)
                {
                    this.OnIndexChanging(value);
                    this.SendPropertyChanging("Index");
                    this._Index = value;
                    this.SendPropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Storage = "_Value", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging("Value");
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Layer in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Layer_LayerDictionaryEntry", Storage="_Layer", ThisKey="LayerID", OtherKey="ID", IsForeignKey=true)]
        public Layer Layer
        {
            get
            {
                return this._Layer.Entity;
            }
            set
            {
                Layer previousValue = this._Layer.Entity;
                if ((previousValue != value) || (this._Layer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Layer");
                    if (previousValue != null)
                    {
                        this._Layer.Entity = null;
                        previousValue.LayerDictionaryEntries.Remove(this);
                    }
                    this._Layer.Entity = value;
                    if (value != null)
                    {
                        this._LayerID = value.ID;
                        value.LayerDictionaryEntries.Add(this);
                    }
                    else
                    {
                        this._LayerID = default(int);
                    }
                    this.SendPropertyChanged("Layer");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Db.LinqConnect.Model.Document in the schema.
    /// </summary>
    [Table(Name = @"test.Documents")]
    public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private ulong _ID;

        private System.Guid _GUID;

        private int _CorpusID;

        private int _CountToken;

        private int _CountSentences;
        #pragma warning restore 0649

        private EntityRef<Corpus> _Corpus;

        private EntitySet<DocumentMetadataEntry> _DocumentMetadataEntries;

        private EntitySet<LayerDocument> _LayerDocuments;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(ulong value);
        partial void OnIDChanged();
        partial void OnGUIDChanging(System.Guid value);
        partial void OnGUIDChanged();
        partial void OnCorpusIDChanging(int value);
        partial void OnCorpusIDChanged();
        partial void OnCountTokenChanging(int value);
        partial void OnCountTokenChanged();
        partial void OnCountSentencesChanging(int value);
        partial void OnCountSentencesChanged();
        #endregion

        public Document()
        {
            this._Corpus  = default(EntityRef<Corpus>);
            this._DocumentMetadataEntries = new EntitySet<DocumentMetadataEntry>(new Action<DocumentMetadataEntry>(this.attach_DocumentMetadataEntries), new Action<DocumentMetadataEntry>(this.detach_DocumentMetadataEntries));
            this._LayerDocuments = new EntitySet<LayerDocument>(new Action<LayerDocument>(this.attach_LayerDocuments), new Action<LayerDocument>(this.detach_LayerDocuments));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "bigint(18) UNSIGNED NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public ulong ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GUID in the schema.
        /// </summary>
        [Column(Storage = "_GUID", CanBeNull = false, DbType = "binary(16) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Guid GUID
        {
            get
            {
                return this._GUID;
            }
            set
            {
                if (this._GUID != value)
                {
                    this.OnGUIDChanging(value);
                    this.SendPropertyChanging("GUID");
                    this._GUID = value;
                    this.SendPropertyChanged("GUID");
                    this.OnGUIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CorpusID in the schema.
        /// </summary>
        [Column(Storage = "_CorpusID", CanBeNull = false, DbType = "int(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CorpusID
        {
            get
            {
                return this._CorpusID;
            }
            set
            {
                if (this._CorpusID != value)
                {
                    if (this._Corpus.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCorpusIDChanging(value);
                    this.SendPropertyChanging("CorpusID");
                    this._CorpusID = value;
                    this.SendPropertyChanged("CorpusID");
                    this.OnCorpusIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountToken in the schema.
        /// </summary>
        [Column(Storage = "_CountToken", CanBeNull = false, DbType = "int(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CountToken
        {
            get
            {
                return this._CountToken;
            }
            set
            {
                if (this._CountToken != value)
                {
                    this.OnCountTokenChanging(value);
                    this.SendPropertyChanging("CountToken");
                    this._CountToken = value;
                    this.SendPropertyChanged("CountToken");
                    this.OnCountTokenChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountSentences in the schema.
        /// </summary>
        [Column(Storage = "_CountSentences", CanBeNull = false, DbType = "int(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CountSentences
        {
            get
            {
                return this._CountSentences;
            }
            set
            {
                if (this._CountSentences != value)
                {
                    this.OnCountSentencesChanging(value);
                    this.SendPropertyChanging("CountSentences");
                    this._CountSentences = value;
                    this.SendPropertyChanged("CountSentences");
                    this.OnCountSentencesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Corpus in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Corpus_Document", Storage="_Corpus", ThisKey="CorpusID", OtherKey="ID", IsForeignKey=true)]
        public Corpus Corpus
        {
            get
            {
                return this._Corpus.Entity;
            }
            set
            {
                Corpus previousValue = this._Corpus.Entity;
                if ((previousValue != value) || (this._Corpus.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Corpus");
                    if (previousValue != null)
                    {
                        this._Corpus.Entity = null;
                        previousValue.Documents.Remove(this);
                    }
                    this._Corpus.Entity = value;
                    if (value != null)
                    {
                        this._CorpusID = value.ID;
                        value.Documents.Add(this);
                    }
                    else
                    {
                        this._CorpusID = default(int);
                    }
                    this.SendPropertyChanged("Corpus");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DocumentMetadataEntries in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Document_DocumentMetadataEntry", Storage="_DocumentMetadataEntries", ThisKey="ID", OtherKey="DocumentID", DeleteRule="CASCADE")]
        public EntitySet<DocumentMetadataEntry> DocumentMetadataEntries
        {
            get
            {
                return this._DocumentMetadataEntries;
            }
            set
            {
                this._DocumentMetadataEntries.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for LayerDocuments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Document_LayerDocument", Storage="_LayerDocuments", ThisKey="ID", OtherKey="DocumentID", DeleteRule="CASCADE")]
        public EntitySet<LayerDocument> LayerDocuments
        {
            get
            {
                return this._LayerDocuments;
            }
            set
            {
                this._LayerDocuments.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DocumentMetadataEntries(DocumentMetadataEntry entity)
        {
            this.SendPropertyChanging("DocumentMetadataEntries");
            entity.Document = this;
        }
    
        private void detach_DocumentMetadataEntries(DocumentMetadataEntry entity)
        {
            this.SendPropertyChanging("DocumentMetadataEntries");
            entity.Document = null;
        }

        private void attach_LayerDocuments(LayerDocument entity)
        {
            this.SendPropertyChanging("LayerDocuments");
            entity.Document = this;
        }
    
        private void detach_LayerDocuments(LayerDocument entity)
        {
            this.SendPropertyChanging("LayerDocuments");
            entity.Document = null;
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Db.LinqConnect.Model.LayerDocument in the schema.
    /// </summary>
    [Table(Name = @"test.LayerDocuments")]
    public partial class LayerDocument : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _LayerID;

        private ulong _DocumentID;

        private byte[] _Content;
        #pragma warning restore 0649

        private EntityRef<Layer> _Layer;

        private EntityRef<Document> _Document;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnLayerIDChanging(int value);
        partial void OnLayerIDChanged();
        partial void OnDocumentIDChanging(ulong value);
        partial void OnDocumentIDChanged();
        partial void OnContentChanging(byte[] value);
        partial void OnContentChanged();
        #endregion

        public LayerDocument()
        {
            this._Layer  = default(EntityRef<Layer>);
            this._Document  = default(EntityRef<Document>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for LayerID in the schema.
        /// </summary>
        [Column(Storage = "_LayerID", CanBeNull = false, DbType = "int(9) NOT NULL", IsPrimaryKey = true)]
        public int LayerID
        {
            get
            {
                return this._LayerID;
            }
            set
            {
                if (this._LayerID != value)
                {
                    if (this._Layer.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLayerIDChanging(value);
                    this.SendPropertyChanging("LayerID");
                    this._LayerID = value;
                    this.SendPropertyChanged("LayerID");
                    this.OnLayerIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DocumentID in the schema.
        /// </summary>
        [Column(Storage = "_DocumentID", CanBeNull = false, DbType = "bigint(18) UNSIGNED NOT NULL", IsPrimaryKey = true)]
        public ulong DocumentID
        {
            get
            {
                return this._DocumentID;
            }
            set
            {
                if (this._DocumentID != value)
                {
                    if (this._Document.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDocumentIDChanging(value);
                    this.SendPropertyChanging("DocumentID");
                    this._DocumentID = value;
                    this.SendPropertyChanged("DocumentID");
                    this.OnDocumentIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Content in the schema.
        /// </summary>
        [Column(Storage = "_Content", DbType = "longblob NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] Content
        {
            get
            {
                return this._Content;
            }
            set
            {
                if (this._Content != value)
                {
                    this.OnContentChanging(value);
                    this.SendPropertyChanging("Content");
                    this._Content = value;
                    this.SendPropertyChanged("Content");
                    this.OnContentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Layer in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Layer_LayerDocument", Storage="_Layer", ThisKey="LayerID", OtherKey="ID", IsForeignKey=true)]
        public Layer Layer
        {
            get
            {
                return this._Layer.Entity;
            }
            set
            {
                Layer previousValue = this._Layer.Entity;
                if ((previousValue != value) || (this._Layer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Layer");
                    if (previousValue != null)
                    {
                        this._Layer.Entity = null;
                        previousValue.LayerDocuments.Remove(this);
                    }
                    this._Layer.Entity = value;
                    if (value != null)
                    {
                        this._LayerID = value.ID;
                        value.LayerDocuments.Add(this);
                    }
                    else
                    {
                        this._LayerID = default(int);
                    }
                    this.SendPropertyChanged("Layer");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Document in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Document_LayerDocument", Storage="_Document", ThisKey="DocumentID", OtherKey="ID", IsForeignKey=true)]
        public Document Document
        {
            get
            {
                return this._Document.Entity;
            }
            set
            {
                Document previousValue = this._Document.Entity;
                if ((previousValue != value) || (this._Document.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Document");
                    if (previousValue != null)
                    {
                        this._Document.Entity = null;
                        previousValue.LayerDocuments.Remove(this);
                    }
                    this._Document.Entity = value;
                    if (value != null)
                    {
                        this._DocumentID = value.ID;
                        value.LayerDocuments.Add(this);
                    }
                    else
                    {
                        this._DocumentID = default(ulong);
                    }
                    this.SendPropertyChanged("Document");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Db.LinqConnect.Model.DocumentMetadataEntry in the schema.
    /// </summary>
    [Table(Name = @"test.DocumentMetadataEntries")]
    public partial class DocumentMetadataEntry : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private ulong _DocumentID;

        private string _Label;

        private byte[] _Value;
        #pragma warning restore 0649

        private EntityRef<Document> _Document;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnDocumentIDChanging(ulong value);
        partial void OnDocumentIDChanged();
        partial void OnLabelChanging(string value);
        partial void OnLabelChanged();
        partial void OnValueChanging(byte[] value);
        partial void OnValueChanged();
        #endregion

        public DocumentMetadataEntry()
        {
            this._Document  = default(EntityRef<Document>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DocumentID in the schema.
        /// </summary>
        [Column(Storage = "_DocumentID", CanBeNull = false, DbType = "bigint(18) UNSIGNED NOT NULL", IsPrimaryKey = true)]
        public ulong DocumentID
        {
            get
            {
                return this._DocumentID;
            }
            set
            {
                if (this._DocumentID != value)
                {
                    if (this._Document.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDocumentIDChanging(value);
                    this.SendPropertyChanging("DocumentID");
                    this._DocumentID = value;
                    this.SendPropertyChanged("DocumentID");
                    this.OnDocumentIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Label in the schema.
        /// </summary>
        [Column(Storage = "_Label", CanBeNull = false, DbType = "varchar(250) NOT NULL", IsPrimaryKey = true)]
        public string Label
        {
            get
            {
                return this._Label;
            }
            set
            {
                if (this._Label != value)
                {
                    this.OnLabelChanging(value);
                    this.SendPropertyChanging("Label");
                    this._Label = value;
                    this.SendPropertyChanged("Label");
                    this.OnLabelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Storage = "_Value", DbType = "longblob NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging("Value");
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Document in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Document_DocumentMetadataEntry", Storage="_Document", ThisKey="DocumentID", OtherKey="ID", IsForeignKey=true)]
        public Document Document
        {
            get
            {
                return this._Document.Entity;
            }
            set
            {
                Document previousValue = this._Document.Entity;
                if ((previousValue != value) || (this._Document.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Document");
                    if (previousValue != null)
                    {
                        this._Document.Entity = null;
                        previousValue.DocumentMetadataEntries.Remove(this);
                    }
                    this._Document.Entity = value;
                    if (value != null)
                    {
                        this._DocumentID = value.ID;
                        value.DocumentMetadataEntries.Add(this);
                    }
                    else
                    {
                        this._DocumentID = default(ulong);
                    }
                    this.SendPropertyChanged("Document");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
