<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="radLabel2.Text" xml:space="preserve">
    <value>&lt;html&gt;&lt;strong&gt;Was heißt GRÜN&lt;/strong&gt;: Mit GRÜN geben Sie die Korpusdaten ohne Einschränkungen unter einer selbst gewählten Lizenz weiter.&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Wann ist GRÜN geeignet&lt;/strong&gt;: Sie wollen Korpusdaten (z. B. auch gemeinfreies Material) an denen Sie entsprechende Rechte halten (bitte ggf. mit Rechtsabteilung bzw. Justiziariat abklären), einer großen Öffentlichkeit zugänglich machen.&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Wann ist GRÜN nicht geeignet&lt;/strong&gt;: Sie haben an den Daten keine vollständigen Rechte (z. B. Zeitungskorpora) oder die Daten enthalten personenbezogene Daten. Siehe ggf. Publikationstyp (GELB/ROT).&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Was muss ich bei GRÜN beachten&lt;/strong&gt;: Stellen Sie bitte vor der Publikation sicher, dass die Daten höchste Qualitätsstandards erfüllen. Haben Sie die Metadaten bereinigt? Sind alle Daten enthalten bzw. entfernt, die Sie (nicht) publizieren möchten?&lt;br /&gt;&lt;br /&gt;Mit GRÜN sind Sie in bester Gesellschaft. Der CorpusExplorer und damit verbundene Ressourcen werden GRÜN publiziert.&lt;/html&gt;</value>
  </data>
  <data name="radLabel3.Text" xml:space="preserve">
    <value>&lt;html&gt;&lt;strong&gt;Was heißt GELB&lt;/strong&gt;: Mit GELB geben Sie modifizierte Korpusdaten (randomisiert) unter einer selbst gewählten Lizenz weiter. Durch die Randomisierung sind weiterhin statistische Analysen auf den Korpusdaten möglich - der Text als Ganzes wird unleserlich.&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Wann ist GELB geeignet&lt;/strong&gt;: Für die Nutzung der publizierten Daten ist der Originaltext unerheblich.&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Wann ist GELB nicht geeignet&lt;/strong&gt;: Wenn es zwingend für die Korpusnutzung ist, dass man Zugriff auf den originalen Volltext haben muss (z. B. lesen). Siehe Publikationstyp (GRÜN/ROT).&lt;/html&gt;</value>
  </data>
  <data name="radLabel4.Text" xml:space="preserve">
    <value>&lt;html&gt;&lt;strong&gt;Was heißt ROT&lt;/strong&gt;: Mit ROT geben Sie die Daten nur einem sehr kleinen Personenkreis weiter. Sie verwalten die Nutzer (Nutzername/Passwort) in einer sicheren DRM-Datei (DRM - Digital Rights Management).&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Wann ist ROT geeignet&lt;/strong&gt;: Die Korpusdaten sollen mit einer kleinen Nutzergruppe (privat) getauscht werden. Alle Nutzer*innen verwenden den CorpusExplorer.&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Wann ist ROT nicht geeignet&lt;/strong&gt;: Wenn die Daten öffentlich einer größeren Personengruppe verfügbar gemacht werden sollen.&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Was muss ich bei ROT beachten&lt;/strong&gt;: Das Korpus wird verschlüsselt und es wird eine DRM-Datei angelegt. Jede Nutzer*in bekommt Zugangsdaten (bestehend aus Nutzername und Passwort). Zum Öffnen des Korpus wird folgendes benötigt: Installation des CorpusExplorer, das Korpus und die dazugehörige DRM-Datei, sowie die individuellen Zugangsdaten.&lt;/html&gt;</value>
  </data>
  <data name="chk_accecptLicenceText.Text" xml:space="preserve">
    <value>&lt;html&gt;Zeige diese Informationen jedes Mal an,&lt;br /&gt;wenn das Korpus geladen wird. &lt;br /&gt;&lt;span style="font-size: 9pt"&gt;Funktioniert nur mit CEC6-Korpora und nicht mit&lt;br /&gt;anderen Export-Formaten.&lt;/span&gt;&lt;/html&gt;</value>
  </data>
  <data name="radLabel6.Text" xml:space="preserve">
    <value>&lt;html&gt;&lt;span style="font-size: 9pt"&gt;&lt;strong&gt;Hinweis zu URLs&lt;/strong&gt;: Die URLs werden (A) im publizierten Korpus verlinkt und wenn Sie die Publikationstypen GRÜN/GELB auswählen, wird (B) die Datei heruntergeladen und der Publikationsdatei beigelegt.&lt;/span&gt;&lt;/html&gt;</value>
  </data>
</root>